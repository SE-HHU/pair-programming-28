#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include<ctype.h>

int add(int x,int y) {
	return(x+y);
}
int subtract(int x,int y) {
	return(x-y);
}
int multiply(int x,int y) {
	return(x*y);
}
float divide(float x,float y) {
	return(x/y);
}


int main() {
	int add(int x,int y);
	int subtract(int x,int y);
	int multiply(int x,int y);
	float divide(float x,float y);				//定义四则运算
	int correct=0;
	int wrong=0;
	int bn[1000];
	int bk[1000];

	int a,b,c,i,j=1;							//定义算式中的数字a,b,c
	int t,r,m,n;
	int h;
	char ch;
	char cd=',';									//定义运算符
	char cf;
	int U;
	int u;
	char cg='^';
	srand(time(NULL));			              	//产生随机数种子

	int A=add(a,b);
	int B=subtract(a,b);
	int C=multiply(a,b);
	float D=divide((float)a,(float)b);
	int E,e, F;        //算出算式的答案

	printf("Welcome to the Four Arithmetic!\n");
	printf("Please enter the arithmetic of questions and fanwei you want\n");
	scanf("%d%d",&m,&U);
	printf("How many questions do you want to show on one line\n");
	scanf("%d",&n);



	for(i=0; i<m; i++,j++) {
		a=rand()%U+1;
		b=rand()%U+1;
		c=rand()%U+1;
		t=rand()%4;
		r=rand()%4;
		//产生数字及运算符的随机数



		FILE* fu;
		fu = fopen("答案.txt", "a");
		fprintf(fu,"%d\t",u);
		fclose(fu);

		FILE* fq;
		if(fq==NULL) {
			printf("创建文件失败\n");
			return 0;
		}
		fq = fopen("Answers.txt", "a");

		FILE* fo;
		fo = fopen("Grade.txt", "a");


		if (t==0) ch='+';						//选择运算符
		else if (t==1) ch='-';
		else if (t==2) ch='*';
		else if (t==3) ch='/';

		if (r==0) cf='+';
		else if (r==1) cf='-';
		else if (r==2) cf='*';
		else if (r==3) cf='/';

		h=rand()%2;
		switch(h) {								//随机产生含一个或两个运算符的算式
			case 0: {							//当随机数是0时产生一个运算符的算式

				FILE* fp;
				if(fp==NULL) {
					printf("创建文件失败\n");
					return 0;
				}

				fp = fopen("Exercises.txt", "a");
				fprintf(fp,"题目%d%c%d%c%d= \t",i+1,cd,a,ch,b);
				fclose(fp);								//将算式存入文件Exercises.txt


				if(ch=='+') {


					printf("%d%c%d%c%d=\t",i+1,cd,a,ch,b);				//输出算式
					scanf("%d",&u);




					A=add(a,b);

					fprintf(fq,"%d \t",A);
					fclose(fq);                    //将答案存入文件Answers.txt


					if(u==A) {
						correct++;
						bn[correct]=i+1;
						fprintf(fo,"Correct:(%d)\t",bn[correct]);
						fclose(fo);
					} else {
						wrong++;
						bk[wrong]=i+1;
						fprintf(fo,"Wrong:(%d) \t",bk[wrong]);
						fclose(fo);
					}



				}

				else if(ch=='-') {


					printf("%d%c%d%c%d=\t",i+1,cd,a,ch,b);
					scanf("%d",&u);



					B=subtract(a,b);

					fprintf(fq,"%d \t",B);
					fclose(fq);


					if(u==B) {
						correct++;
						bn[correct]=i+1;
						fprintf(fo,"Correct:(%d) \t",bn[correct]);
						fclose(fo);
					} else {
						wrong++;
						bk[wrong]=i+1;
						fprintf(fo,"Wrong:(%d)\t",bk[wrong]);
						fclose(fo);
					}



				} else if(ch=='*') {

					printf("%d%c%d%c%d= \t",i+1,cd,a,ch,b);
					scanf("%d",&u);



					C=multiply(a,b);

					fprintf(fq,"%d \t",C);
					fclose(fq);


					if(u==C) {
						correct++;
						bn[correct]=i+1;
						fprintf(fo,"Correct:(%d) \t",bn[correct]);
						fclose(fo);
					} else {
						wrong++;
						bk[wrong]=i+1;
						fprintf(fo,"Wrong:(%d)  \t",bk[wrong]);
						fclose(fo);
					}


				} else if(ch=='/') {

					printf("%d%c%d%c%d= \t",i+1,cd,a,ch,b);
					scanf("%d",&u);



					D=divide((float)a,(float)b);

					fprintf(fq,"%.2f  \t",D);
					fclose(fq);


					if(u==D) {
						correct++;
						bn[correct]=i+1;
						fprintf(fo,"Correct:(%d)\t",bn[correct]);
						fclose(fo);
					} else {
						wrong++;
						bk[wrong]=i+1;
						fprintf(fo,"Wrong:(%d)\t",bk[wrong]);
						fclose(fo);
					}


				}
				if(j%n==0) printf("\n");




				break;
			}



			case 1: {												//当随机数是1时产生两个运算符的算式

				FILE* fp;
				if(fp==NULL) {
					printf("创建文件失败\n");
					return 0;
				}

				fp = fopen("Exercises.txt", "a");
				fprintf(fp,"题目%d%c%d%c%d%c%d= \t",i+1,cd,a,ch,b,cf,c);
				fclose(fp);								//将算式存入文件Exercises.txt

				if(ch=='+') {
					printf("%d%c%d%c%d%c%d=\t",i+1,cd,a,ch,b,cf,c);
					scanf("%d",&u);



					switch(cf) {

						case '+':
							E=a+b+c;
							fprintf(fq,"%d \t",E);
							fclose(fq);

							break;
						case '-':
							E=a+b-c;
							fprintf(fq,"%d \t",E);
							fclose(fq);

							break;
						case '*':
							E=a+b*c;
							fprintf(fq,"%d \t",E);
							fclose(fq);

							break;
						case '/':
							F=a+(int)(b/c);
							e=b%c;
							fprintf(fq,"%d%c%d/%d \t",F,cg,e,c);
							fclose(fq);

							break;
					}



					if(u==E) {
						correct++;
						bn[correct]=i+1;
						fprintf(fo,"Correct:(%d) \t",bn[correct]);
						fclose(fo);
					} else {
						wrong++;
						bk[wrong]=i+1;
						fprintf(fo,"Wrong:(%d)\t",bk[wrong]);
						fclose(fo);
					}


				}

				else if(ch=='-') {

					printf("%d%c%d%c%d%c%d= \t",i+1,cd,a,ch,b,cf,c);
					scanf("%d",&u);

switch(cf) {

						case '+':
							E=a-b+c;
							fprintf(fq,"%d \t",E);
							fclose(fq);

							break;
						case '-':
							E=a-b-c;
							fprintf(fq,"%d \t",E);
							fclose(fq);

							break;
						case '*':
							E=a-b*c;
							fprintf(fq,"%d \t",E);
							fclose(fq);

							break;
						case '/':
							F=a-(int)(b/c);
							e=b%c;
							fprintf(fq,"%d%c%d/%d \t",F,cg,e,c);
							fclose(fq);

							break;
					}
					if(u==E) {
						correct++;
						bn[correct]=i+1;
						fprintf(fo,"Correct:(%d)\t",bn[correct]);
						fclose(fo);
					} else {
						wrong++;
						bk[wrong]=i+1;
						fprintf(fo,"Wrong:(%d) \t",bk[wrong]);
						fclose(fo);
					}





				} else if(ch=='*') {

					printf("%d%c%d%c%d%c%d= \t",i+1,cd,a,ch,b,cf,c);
					scanf("%d",&u);

switch(cf) {

						case '+':
							E=a*b+c;
							fprintf(fq,"%d \t",E);
							fclose(fq);

							break;
						case '-':
							E=a*b-c;
							fprintf(fq,"%d \t",E);
							fclose(fq);

							break;
						case '*':
							E=a*b*c;
							fprintf(fq,"%d \t",E);
							fclose(fq);

							break;
						case '/':
							F=(int)(a*b/c);
							e=(a*b)%c;
						fprintf(fq,"%d%c%d/%d \t",F,cg,e,c);
							fclose(fq);

							break;
					}


					if(u==E) {
						correct++;
						bn[correct]=i+1;
						fprintf(fo,"Correct:(%d) \t",bn[correct]);
						fclose(fo);
					} else {
						wrong++;
						bk[wrong]=i+1;
						fprintf(fo,"Wrong:(%d)\t",bk[wrong]);
						fclose(fo);
					}



				} else if(ch=='/') {

					printf("%d%c%d%c%d%c%d= \t",i+1,cd,a,ch,b,cf,c);
					scanf("%d",&u);


					switch(cf) {

						case '+':
							
							F=c+(int)(a/b);
							e=a%b;
							fprintf(fq,"%d%c%d/%d \t",F,cg,e,b);
							fclose(fq);

							break;
						case '-':
							F=c-(int)(a/b);
							e=a%b;
							fprintf(fq,"%d%c%d/%d \t",F,cg,e,b);
							fclose(fq);

							break;
						case '*':
							F=(int)(a*c/b);
							e=(a*c)%b;
							fprintf(fq,"%d%c%d/%d \t",F,cg,e,b);
							fclose(fq);

							break;
						case '/':
							F=(int)(a/c/b);
							e=a%(b*c);
							fprintf(fq,"%d%c%d/%d \t",F,cg,e,b);
							fclose(fq);

							break;
					}

					if(u==E) {
						correct++;
						bn[correct]=i+1;
						fprintf(fo,"Correct:(%d)\t",bn[correct]);
						fclose(fo);
					} else {
						wrong++;
						bk[wrong]=i+1;
						fprintf(fo,"Wrong:(%d) \t",bk[wrong]);
						fclose(fo);
					}




				}
				if(j%n==0) printf("\n");

			}
			break;
			FILE* fo;
			fprintf(fo,"Wrong:%d\t",wrong);
			fprintf(fo,"Correct:%d\t",correct);
			fclose(fo);
		}

	}
	FILE* fo;
	fprintf(fo,"Wrong:%d\t",wrong);
	fprintf(fo,"Correct:%d\t",correct);
	fclose(fo);
}
